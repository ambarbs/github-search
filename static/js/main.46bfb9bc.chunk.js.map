{"version":3,"sources":["components/app/App.styles.js","components/common/Common.styles.js","components/card/Card.styles.js","components/card/Card.js","components/app/App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","SearchBox","input","Label","label","props","paddingTop","paddingBottom","fontWeight","Flex","flexDirection","FadeIn","keyframes","GridView","CardWrapper","Card","id","name","watchersCount","defaultProps","App","useState","data","setData","error","setError","fetchData","url","a","fetch","json","then","res","catch","err","searchTerm","setSearchTerm","debounceLoadData","useCallback","_","debounce","useEffect","items","renderedContent","map","item","watchers_count","placeholder","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"oiCAEO,IAAMA,EAAaC,IAAOC,IAAV,KAmBVC,EAAYF,IAAOG,MAAV,K,onCCnBf,IAAMC,EAAQJ,IAAOK,MAAV,KACD,SAACC,GAAD,OAAWA,EAAMC,YAAc,YAC5B,SAACD,GAAD,OAAWA,EAAME,eAAiB,YACrC,SAACF,GAAD,OAAWA,EAAMG,cAGrBC,EAAOV,IAAOC,IAAV,KAGG,SAACK,GAAD,OAAWA,EAAMK,eAAiB,SAIzCC,EAASC,YAAH,KAKNC,EAAWd,IAAOC,IAAV,K,4lBCjBd,IAAMc,EAAcf,IAAOC,IAAV,IAYTW,GCVTI,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,cAAb,OACX,kBAACJ,EAAD,KACE,kBAACL,EAAD,KACE,kBAACN,EAAD,CAAOK,WAAW,QAAlB,OACA,kBAACL,EAAD,KAAQa,IAEV,kBAACP,EAAD,KACE,kBAACN,EAAD,CAAOK,WAAW,QAAlB,QACA,kBAACL,EAAD,KAAQc,IAEV,kBAACR,EAAD,KACE,kBAACN,EAAD,CAAOK,WAAW,QAAlB,mBACA,kBAACL,EAAD,KAAQe,OAWdH,EAAKI,aAAe,CAClBH,GAAI,MACJC,KAAM,MACNC,cAAe,GAEFH,QCiBAK,EA5CH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEUF,mBAAS,MAFnB,mBAETG,EAFS,KAEFC,EAFE,KAGVC,EAAS,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACOC,MAAMF,GADb,cAGbG,OACAC,MAAK,SAACC,GAAD,OAAST,EAAQS,MACtBC,OAAM,SAACC,GAAD,OAAST,EAASS,MALX,2CAAH,sDAHC,EAWoBb,mBAAS,IAX7B,mBAWTc,EAXS,KAWGC,EAXH,KAYVC,EAAmBC,sBAAYC,IAAEC,SAASd,EAAW,KAAM,IAE3DC,EAAG,uDAAmDQ,EAAnD,0BACTM,qBAAU,WACJN,GACFE,EAAiBV,KAElB,CAACA,IAnBY,MAqBOL,EAAfoB,aArBQ,MAqBA,GArBA,EAsBVC,EAAkBnB,EACtB,6CAEA,kBAACX,EAAD,KACG6B,EAAME,KAAI,SAACC,GAAU,IACZ7B,EAA4C6B,EAA5C7B,GAAIC,EAAwC4B,EAAxC5B,KAAsBC,EAAkB2B,EAAlCC,eAClB,OAAO,kBAAC,EAAD,CAAM9B,GAAIA,EAAIC,KAAMA,EAAMC,cAAeA,SAItD,OACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,CACE8C,YAAY,wBACZC,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAWd,EAAcc,EAAMC,OAAOH,UAEjDL,ICjCaS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAT,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.46bfb9bc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  background: rgb(2, 0, 36);\n  background: linear-gradient(\n    90deg,\n    rgba(2, 0, 36, 1) 0%,\n    rgba(13, 12, 61, 1) 13%,\n    rgba(21, 21, 81, 0.9347494746861833) 44%\n  );\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  min-height: 100vh;\n  //@media (max-width: 576px) {\n  //  flex-direction: column;\n  //}\n`;\n\nexport const SearchBox = styled.input`\n  color: #333;\n  background: white;\n  height: 70px;\n  padding: 0 25px;\n  font-size: 1em;\n  border-radius: 6px;\n  margin-bottom: 2rem;\n  margin-top: 2rem;\n  box-shadow: 0 4px 12px rgba(77, 128, 114, 0.3);\n`;\n","import styled, { keyframes } from 'styled-components';\n\nexport const Label = styled.label`\n  padding-top: ${(props) => props.paddingTop || '0.5rem'};\n  padding-bottom: ${(props) => props.paddingBottom || '0.5rem'};\n  font-weight: ${(props) => props.fontWeight};\n`;\n\nexport const Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: ${(props) => props.flexDirection || 'row'};\n  min-width: 75%;\n`;\n\nexport const FadeIn = keyframes`\n  from { opacity: 0; }\n  to   { opacity: 1; }\n`;\n\nexport const GridView = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 20vw);\n  grid-template-rows: repeat(4, auto);\n  grid-gap: 0.75rem;\n  justify-content: center;\n  \n  @media only screen and (max-width: 1200px) {\n    grid-template-columns: repeat(3, 30vw);\n    grid-template-rows: repeat(3, auto);\n    grid-gap: 0.5rem;\n  }  \n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(2, 45vw);\n    grid-template-rows: repeat(2, auto);\n    grid-gap: 0.25rem;\n  }\n  @media only screen and (max-width: 400px) {\n    grid-template-columns: repeat(1, 90vw);\n    grid-template-rows: repeat(2, auto);\n    grid-gap: 0.25rem;\n  }\n`;\n","import styled from 'styled-components';\nimport { FadeIn } from '../common/Common.styles';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5rem;\n  margin-bottom: 25px;\n  color: #333;\n  background: white;\n  border-radius: 0.75rem;\n  font-size: 1rem;\n  box-shadow: 0 4px 12px rgba(77, 128, 114, 0.3);\n  animation: ${FadeIn} 2s forwards;\n  \n  @media only screen and (max-width: 1200px) {\n      font-size: 0.75rem;\n      border-radius: 0.5rem;\n  }  \n  @media only screen and (max-width: 400px) {\n      font-size: 0.7rem;\n      border-radius: 0.25rem;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { CardWrapper } from './Card.styles';\nimport { Flex, Label } from '../common/Common.styles';\n\nconst Card = ({ id, name, watchersCount }) => (\n  <CardWrapper>\n    <Flex>\n      <Label fontWeight=\"bold\">ID:</Label>\n      <Label>{id}</Label>\n    </Flex>\n    <Flex>\n      <Label fontWeight=\"bold\">Name</Label>\n      <Label>{name}</Label>\n    </Flex>\n    <Flex>\n      <Label fontWeight=\"bold\">Watchers Count:</Label>\n      <Label>{watchersCount}</Label>\n    </Flex>\n  </CardWrapper>\n);\n\nCard.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  watchersCount: PropTypes.number,\n};\n\nCard.defaultProps = {\n  id: 'N/A',\n  name: 'N/A',\n  watchersCount: 0,\n};\nexport default Card;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport _ from 'lodash';\nimport { AppWrapper, SearchBox } from './App.styles';\nimport Card from '../card/Card';\nimport { GridView } from '../common/Common.styles';\n\nconst App = () => {\n  const [data, setData] = useState({});\n  const [error, setError] = useState(null);\n  const fetchData = async (url) => {\n    const response = await fetch(url);\n    response\n      .json()\n      .then((res) => setData(res))\n      .catch((err) => setError(err));\n  };\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const debounceLoadData = useCallback(_.debounce(fetchData, 300), []);\n\n  const url = `https://api.github.com/search/repositories?q=${searchTerm}&sort=stars&order=desc`;\n  useEffect(() => {\n    if (searchTerm) {\n      debounceLoadData(url);\n    }\n  }, [url]);\n\n  const { items = [] } = data;\n  const renderedContent = error ? (\n    <>Error</>\n  ) : (\n    <GridView>\n      {items.map((item) => {\n        const { id, name, watchers_count: watchersCount } = item;\n        return <Card id={id} name={name} watchersCount={watchersCount} />;\n      })}\n    </GridView>\n  );\n  return (\n    <AppWrapper>\n      <SearchBox\n        placeholder=\"Search Github repo...\"\n        value={searchTerm}\n        onChange={(event) => setSearchTerm(event.target.value)}\n      />\n      {renderedContent}\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}